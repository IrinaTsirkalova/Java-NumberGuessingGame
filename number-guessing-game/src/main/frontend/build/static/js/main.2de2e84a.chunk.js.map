{"version":3,"sources":["logoImage.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","setShow","handleClose","handleShow","game","setGame","level","setLevel","userData","setUserData","gameId","setGameId","setMaskedNumber","startNewGame","a","fetch","method","headers","response","json","id","handleSubmit","event","preventDefault","console","log","undefined","hiddenNumber","className","Button","onClick","triesLeft","hint","Form","onSubmit","userNumber","map","number","Group","controlId","Control","type","placeholder","onChange","data","target","value","status","win","Modal","show","onHide","Header","Title","Body","Footer","variant","disabled","numberGuessHints","src","logoImage","alt","ToggleButtonGroup","name","defaultValue","ToggleButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2de2e84a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoImage.6261f4bf.png\";","import React, { useState } from \"react\";\nimport { Button, Form, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport Modal from 'react-bootstrap/Modal';\nimport \"./App.css\";\nimport logoImage from \"./logoImage.png\";\n\nfunction App() {\n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const [game, setGame] = useState();\n  const [level, setLevel] = useState();\n  const [userData, setUserData] = useState();\n  const [gameId, setGameId] = useState();\n  const [maskedNumber, setMaskedNumber] = useState();\n\n  const easyLevel = function () {\n    setLevel(\"easy\");\n  };\n\n  const hardLevel = function () {\n    setLevel(\"hard\");\n  };\n\n  const startNewGame = async () => {\n    let response = await fetch(\"/api/games/\" + level, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    let game = await response.json();\n    setGame(game);\n    setGameId(game.id);\n    setMaskedNumber(\"*\");\n  };\n\n  function getData(data) {\n    setUserData(data.target.value);\n  };\n\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    console.log('Submmiting');\n    console.log(userData);\n\n    if (userData === \"\" || userData === undefined) {\n      return;\n    }\n\n    let response = await fetch(\"/api/games/\" + level + \"/\" + gameId + \"/\" + userData, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    setGame(await response.json());\n    userData === game.hiddenNumber ? setMaskedNumber(game.hiddenNumber) : setMaskedNumber(\"*\")\n\n    setUserData(\"\");\n\n  };\n\n  function backToHome() {\n    setGame(null);\n  }\n\n  return (\n    <div className=\"App\">\n      {!game ? (\n        <>\n          <img className=\"App-logoImage\" src={logoImage} alt=\"LogoImage\" />\n          <p className=\"App-chooseLevelTxt\">Please choose level:</p>\n          <ToggleButtonGroup className=\"App-radioButton\" type=\"radio\" name=\"options\" defaultValue={1}>\n            <ToggleButton className=\"App-easyLevelBtn\" onClick={easyLevel} id=\"tbg-radio-1\" value={level}> Easy </ToggleButton>\n            <ToggleButton className=\"App-hardLevelBtn\" onClick={hardLevel} id=\"tbg-radio-3\" value={level}> Hard </ToggleButton>\n          </ToggleButtonGroup>\n          <br />\n          <br />\n          <Button className=\"App-playGameBtn\" onClick={startNewGame}> Let's play </Button>\n        </>\n      ) : (\n        <>\n          <div className=\"App-containerFlex\">\n            <div className=\"App-homeNav App-column-1\">\n              <Button className=\"App-homeBtn\" onClick={backToHome}>Home</Button>\n            </div>\n            <div className=\"App-column-2\">\n              <h2 className=\"App-gameHeaderTxt\">Guess the number</h2>\n              <h2 className=\"App-gameHeaderTries\"> You have {game.triesLeft} tries left</h2>\n              <h3 className=\"App-level\">Level: {game.level} </h3>\n              <h5 className=\"App-levelHint\">{game.hint}</h5>\n              <Form className='App-inputForm' onSubmit={handleSubmit} >\n                {!game.userNumber ?\n                  (<div className=\"App-guesses\">Your guesses: </div>) :\n                  (<div className=\"App-guesses\">Your guesses: {game.userNumber.map((number) =>\n                    (<h4 className=\"App-guessedNumbers\">{number} </h4>))}\n                  </div>)}\n                <br />\n                <Form.Group controlId=\"formNumberInput\" className=\"App-form\">\n                  <Form.Control type=\"number\" placeholder=\"Enter a number\" onChange={getData} value={userData} />\n                  <p className=\"App-gameStatus\"> {game.status}</p>\n                  {(() => {\n                    if (game.triesLeft < 1 && !game.win) {\n                      return (\n                        <Modal show={handleShow} onHide={handleClose}>\n                          <Modal.Header>\n                            <Modal.Title>Sorry, you lost</Modal.Title>\n                          </Modal.Header>\n                          <Modal.Body>Better luck next time!</Modal.Body>\n                          <Modal.Footer>\n                            <Button className=\"App-alertPopUp\"\n                              onClick={() => {\n                                handleClose();\n                                startNewGame();\n                              }}>\n                              Start new game\n                            </Button>\n                          </Modal.Footer>\n                        </Modal>\n                      )\n                    } else if (game.win) {\n                      return (\n                        <Modal show={handleShow} onHide={handleClose}>\n                          <Modal.Header>\n                            <Modal.Title>Congratulations!!! You won!!!</Modal.Title>\n                          </Modal.Header>\n                          <Modal.Footer>\n                            <Button className=\"App-alertPopUp\"\n                              onClick={() => {\n                                handleClose();\n                                startNewGame();\n                              }}>\n                              Start new game\n                            </Button>\n                          </Modal.Footer>\n                        </Modal>\n                      )\n                    }\n                  })()}\n                  <br />\n                </Form.Group>\n                <Button className=\"App-btnSubmit\" variant=\"primary\" type=\"submit\"\n                  disabled={game.win || game.triesLeft === 0}>Submit</Button>\n                <Button className=\"App-btnNewGame\" onClick={startNewGame}>New Game</Button>\n              </Form>\n            </div>\n            <div className=\"App-column-3\">\n              {!game.numberGuessHints ?\n                (<p></p>) :\n                (<div className=\"App-numberHints\"><h2 id=\"numberHintsTitle\">Hints</h2>{game.numberGuessHints.map((hint) =>\n                  (<p id=\"hints\">Hint: {hint}</p>))}\n                </div>)}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}