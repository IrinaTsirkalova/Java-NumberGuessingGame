{"version":3,"sources":["logoImage.png","App.js","reportWebVitals.js","index.js"],"names":["App","useState","game","setGame","level","setLevel","userData","setUserData","gameId","setGameId","maskedNumber","setMaskedNumber","startNewGame","a","fetch","method","headers","response","json","id","handleSubmit","event","preventDefault","console","log","hiddenNumber","className","Button","onClick","triesLeft","numberGuessHints","map","hint","userNumber","number","Form","onSubmit","Group","controlId","Control","type","placeholder","onChange","data","target","value","status","variant","disabled","win","src","logoImage","alt","ToggleButtonGroup","name","defaultValue","ToggleButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a78e1b7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logoImage.6261f4bf.png\";","import React, { useState } from \"react\";\nimport { Button, Form,ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport \"./App.css\";\nimport logoImage from  \"./logoImage.png\";\n\nfunction App(){\n\n  const [game, setGame] = useState();\n  const [level, setLevel] = useState();\n  const [userData, setUserData] = useState();\n  const [gameId, setGameId] = useState();\n  const[maskedNumber, setMaskedNumber] = useState();\n\n  const easyLevel = function () {\n    setLevel(\"easy\");\n  };\n\n  const hardLevel = function () {\n    setLevel(\"hard\");\n   };\n\n  const startNewGame = async () => {\n    let response = await fetch(\"/api/games/\"+ level, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    let game = await response.json();\n    setGame(game);\n    setGameId(game.id);\n    setMaskedNumber(\"*\");\n  };\n\n  function getData(data){\n    setUserData(data.target.value);\n  };\n  \n \n  const handleSubmit = async (event) => {\n    event.preventDefault();\n   \n    console.log('Submmiting');\n    console.log(userData);\n\n    let response = await fetch(\"/api/games/\"+ level+\"/\"+gameId+\"/\"+userData, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    setGame(await response.json());\n    userData == game.hiddenNumber ? setMaskedNumber(game.hiddenNumber) : setMaskedNumber(\"*\")\n   \n    setUserData(\"\");\n    \n  };\n\n  function backToHome(){\n    setGame(null);\n  }\n\n\n  return (\n    <div className=\"App\">\n      {!game ? (\n\n        <>\n          <h1 className = \"App-headerText\">Welcome! This is a number guessing game.</h1>\n          <img className = \"App-logoImage\" src={logoImage} alt=\"LogoImage\"/>\n          <p className = \"App-chooseLevelP1\">Please choose level:</p>\n          <ToggleButtonGroup className = \"App-radioButton\" type=\"radio\" name=\"options\" defaultValue={1}>\n                <ToggleButton className = \"App-easyLevel\" onClick={easyLevel} id=\"tbg-radio-1\" value={level}> Easy </ToggleButton>\n                <ToggleButton  className = \"App-hardLevel\" onClick={hardLevel} id=\"tbg-radio-3\" value={level}> Hard </ToggleButton>\n          </ToggleButtonGroup>\n          <br/>\n          <br/>\n          <Button className = \"App-playGameButton\" onClick={startNewGame}> Let's play </Button>\n        </>\n\n      ) : (\n        <>\n       <div className=\"App-homeNav\"> \n         <Button  className = \"App-buttonHome\" onClick= {backToHome}>Home</Button>\n         <br/>\n          <h4 className = \"App-hiddenNumber\">The hidden number: {game.hiddenNumber}</h4>\n       </div>\n         \n          <h1  className= \"App-gameHeaderText\">Guess the number. You have {game.triesLeft} tries left </h1>\n          {!game.numberGuessHints ?\n             (<p></p>) : \n             (<div className=\"App-numberHints\"><h2>Hints</h2>{game.numberGuessHints.map((hint)=>\n                (<p>Hint: {hint}</p>))}\n              </div>)}    \n          <br/>\n          <br/>\n          <br/>\n          <h2 className= \"App-level\">Level: {game.level} </h2>\n          <br/>\n          <br/>\n          <h4 className= \"App-hint\">{game.hint}</h4>\n          <br/>\n          <br/>\n          <h3>{maskedNumber}</h3>\n          {!game.userNumber ? \n            (<h3 className = \"App-guesses\">Your guesses: </h3>) :\n            (<div className = \"App-guesses\">Your guesses: {game.userNumber.map((number)=> \n                (<h4  className=\"App-guessedNumbers\">{number} </h4>))}\n          </div>) }\n         \n          <br/>\n            <Form  className = 'App-inputForm' onSubmit = {handleSubmit} >\n              <Form.Group controlId=\"formNumberInput\" className = \"App-form\">\n                 <Form.Control type=\"number\" placeholder=\"Enter a number\" onChange = {getData} value = {userData}/>\n                 <p className=\"App-status\"> {game.status}</p>\n                 <br/>\n              </Form.Group>\n            \n              <Button  className = \"App-buttonSubmit\" variant=\"primary\" type=\"submit\"\n               disabled={game.win || game.triesLeft === 0}>Submit</Button>\n              <Button  className = \"App-buttonNewGame\" onClick= {startNewGame}>New Game</Button>\n              \n            </Form>     \n\n                 \n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}